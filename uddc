#!/usr/bin/env python2

## Universal Diagnostic Data Collector (uddc)
## formerly 'getlogs'
## Written by Rob Voss

# Import required libraries
from time import strftime as now
from getopt import getopt as options
from getopt import GetoptError as opterr
from subprocess import Popen as subopen
from subprocess import PIPE as subpipe
from urllib2 import urlopen as openurl
from glob import glob as dirlist
from os import makedirs as mkdir
from os import statvfs as fsspace
from os import remove as rmfile
from os import listdir as filelist
from os.path import exists as isexist
from os.path import getsize as getfsz
from sys import exit as isfail
from sys import argv as sysarg
from sys import stdout as sysout
from tarfile import open as mktar
from shutil import rmtree as cleanup
from pydoc import pager as paging
from math import ceil as roundup

# Global constants
LNAME = "Universal Diagnostic Data Collector"
SNAME = "uddc"
VERSION = "2.1.4"
BUILD = "220513.05"
SUFFIX = "Beta"
PNAME = "\r\n" + LNAME + " (" + SNAME + ") v" + VERSION + "-" + BUILD + " " + SUFFIX
MVER = LNAME + " v" + VERSION + "-" + BUILD + " " + SUFFIX
RUNFROM = "/opt/proofpoint/current/admin/admind/deploy"
DATA = "/opt/proofpoint/uddc/uddc.dat"
FORBIDDEN = ['kill ', 'killall', 'pkill ', 'reboot', 'shutdown', 'rm ', 'rmdir ', 'chmod ', 'chown ', 'mv ', 'ln ', 'su ', 'sudo ', 'scp ', 'sftp ', 'ssh ', 'vi ', 'vim ', 'nano ']
# Constants to be added for additional functionality (not yet implemented)
# CVSDIR = "/opt/proofpoint/current/admin/admind/deploy"
# GITDIR = ""

# Global variables
timestamp = now("%Y%m%d%H%M%S%z")
datlines = []
urllines = []
cmdlines = []
loglines = []
cfglines = []
vout = PNAME + "\r\n"
helpout = PNAME + """

Usage: uddc <OPTIONS>

Collect diagnostic data.

Example: uddc --get admin --output admin.tgz

Miscellaneous Options:
  -h, --help                Display this help text.
  -v, --version             Display version information.
  -s, --show                Display valid keywords.
  -q, --quiet               Suppress excess output to screen.
  --selfdestruct            Delete all files in UDDC directory except
                            for the output.

File Options:
  -k, --keyfile <file>      Load keyword data from <file>. Default is
                            /opt/proofpoint/uddc/uddc.dat
  -p, --path <path>         Save output in <path>. Default output
                            path is /opt/proofpoint/uddc
  -o, --output <file>       Package data in <file>. File extension
                            should be either tgz or tar.gz or there
                            may be difficulty unpacking it. Default is
                            uddc_<HOST>_<KEY>_<TIME>.tgz
  -t, --temp <path>         Use <path> as temp directory. Default is
                            /opt/proofpoint/tmp

Data Collection Options:
  -g, --get <keyword>       Collect diagnostic data for <keyword>. The
                            keyword should represent what type of issue
                            you need diagnostic data for, such as filter,
                            sendmail, admin, fr, hft, alerts, av, etc.
                            Default keyword is always
  --test                    Test mode. Displays a list of files that
                            would be collected. Does not actually create
                            an output file.
  --nocfgs                  Skip collecting configuration data.
  --nocmds                  Skip collecting command output.
  --nologs                  Skip collecting logs.
  --nourls                  Skip collecting URL output.
  --notalways               Skip collecting the default data. Only
                            collect keyword specific data.
"""

# Help page
def help_out():
    paging(helpout)
    isfail(2)


# Version info
def version_out():
    print(vout)
    isfail(2)


# Version info
def menu_version():
    print(MVER)
    isfail(2)


# Show valid keywords
def show_out(keypath):
    show=(PNAME + "\r\n\r\nValid Keywords:\r\n")
    split2=[]
    try:
        with open(keypath) as filedat:
            for line in filedat.readlines():
                if '#' not in line:
                    split1 = line.split('::')[0].split(',')
                    for splitline in split1:
                        if (splitline != '' and splitline != 'overkill' and splitline != 'always' and splitline != 'fixit'):
                            split2.append(splitline)
    except IOError:
        print "Couldn't find the file : {}".format(keypath)

    filedat.close()
    split3 = (sorted(list(set(split2))))
    count = 0
    for key in split3:
        if (count == 3):
            show = (show + key)
        else:
            show = (show + '{:<20}'.format(key))
        count = count + 1
        if (count == 4):
            show = (show + "\r\n")
            count=0
    paging(show)
    isfail(2)


# List valid keywords
def gimme_out(keypath):
    show=''
    split2=[]
    try:
        with open(keypath) as filedat:
            for line in filedat.readlines():
                if '#' not in line:
                    split1 = line.split('::')[0].split(',')
                    for splitline in split1:
                        if (splitline != '' and splitline != 'overkill' and splitline != 'always' and splitline != 'fixit'):
                            split2.append(splitline)
    except IOError:
        print "Couldn't find file : {}".format(keypath)

    filedat.close()
    split3 = (sorted(list(set(split2))))
    for key in split3:
        print(key)

    isfail(2)


# Make sure file path exists, and create it if it doesn't
def check_dir(filepath):
    if not isexist(filepath):
        mkdir(filepath)


# Make sure keyword data file is there
def check_keyfile(keypath):
    if not isexist(keypath):
        isfail( "Could not find keyword data file at %s\r\nExiting" % str(keypath) )


# read in keyword data
def read_keyfile(keyget, filein, menu, chkalways, chkcfgs, chkcmds, chklogs, chkurls):
    isallowed = True
    keyget = keyget + ","
    try:
        with open(filein, 'r') as filedat:
            filelines = filedat.readlines()
            filedat.close()
    except IOError:
        print "Couldn't find file : {}".format(filein)

    for line in filelines:
        if (keyget in line) or (chkalways and ("always," in line)):
            if (chkcmds and (':cmd:' in line)):
                isallowed = True
                for badcmd in FORBIDDEN:
                    if badcmd in line.split('::')[-1]:
                        isallowed = False
                        if not menu:
                            print("Executing '" + line.split('::')[-1].replace("\n", "") + "' is forbidden. Skipped.")
                        else:
                            errorfile = open('/tmp/errors_out', 'a+')
                            errorfile.write("Executing '" + line.split('::')[-1].replace("\n", "") + "' is forbidden. Skipped.\n")
                            errorfile.close()
                if isallowed:
                    cmdlines.append(line.split('::')[-1].replace("\n", ""))
            elif (chkcfgs and (':cfg:' in line)):
                cfglines.append(line.split('::')[-1].replace("\n", ""))
            elif (chklogs and (':log:' in line)):
                loglines.append(line.split('::')[-1].replace("\n", ""))
            elif (chkurls and (':url:' in line)):
                urllines.append(line.split('::')[-1].replace("\n", ""))


# create tgz file
def make_tar(keysin, tarout, testing, menu, quiet):
    if not testing:
        keylist = sorted(list(set(keysin)))
        tar = mktar(tarout, "w|gz")
        countlist = keylist
        keylen = 0
        keycount = 1
        keystep = 0
        keytemp = 1
        for countdirs in countlist:
            keylen = keylen + len(dirlist(countdirs))
            keystep = 100.00 / keylen
        keytemp = keytemp + keystep
        keycount = keytemp
        if menu:
            print(0)
            print(1)
        for line in keylist:
            filelist=sorted(dirlist(line))
            for files in filelist:
                if quiet:
                    keytemp = keytemp + keystep
                    keycount = keytemp
                elif menu:
                    print(int(keycount))
                    keytemp = keytemp + keystep
                    keycount = keytemp
                    if keycount > 100:
                        keycount = 100
                else:
                    print("Progress: " + str(int(keycount)) + "%")
                    sysout.write("\033[F")
                    keytemp = keytemp + keystep
                    keycount = keytemp
                    if keycount > 100:
                        keycount = 100
                try:
                    tar.add(files)
                except IOError:
                    if not menu:
                        print("You do not have permission to access '" + files + "'. Skipped.")
                    else:
                        errorfile = open('/tmp/errors_out', 'a+')
                        errorfile.write("You do not have permission to access '" + files + "'. Skipped.\n")
                        errorfile.close()
                    pass


# create list of files
def check_size(keysin, outdir, testing):
    if not testing:
        spaceneeded = 0
        filesize = 0
        drivespace = fsspace(outdir).f_bavail*fsspace(outdir).f_bsize
        istoobig = False
        keylist = sorted(list(set(keysin)))
        for line in keylist:
            filelist=sorted(dirlist(line))
            for files in filelist:
                filesize = filesize + getfsz(files)
                if filesize >= drivespace:
                    istoobig = True
        if istoobig:
            spaceneeded = int(((filesize - drivespace) * 1.1) / 1048576)
            mbfilesize = int(filesize / 1048576)
            mbdrivespace = int(drivespace / 1048576)
            print('Insufficient space.\nNeeded: ' + str(mbfilesize) + 'MB\nAvailable: ' + str(mbdrivespace) + 'MB\nPlease clear up an additional ' + str(spaceneeded) + 'MB to continue')
            isfail(2)
    

# create list of files
def make_filelist(keysin, tarout, testing, menu):
    if testing:
        keylist = sorted(list(set(keysin)))
        for line in keylist:
            filelist=sorted(dirlist(line))
            for files in filelist:
                if menu:
                    filesfile = open('/tmp/files_out', 'a+')
                    filesfile.write(files + "\n")
                    filesfile.close()
                else:
                    print(files)
    

# run commands and add output to list of files to collect
def add_cmds(cmdsin, tmpin, testing, menu):
    cmddir = tmpin + "/cmds"
    check_dir(cmddir)
    for line in cmdsin:
        cmdline = line
        cmdname = cmdline.replace(" ", "_")
        cmdname = cmdline.replace("/", "_")
        cmdout = cmddir + "/" + cmdname + "-" + timestamp
        datlines.append(cmdout)
        if testing:
            if menu:
                filesfile = open('/tmp/files_out', 'a+')
                filesfile.write("output of '" + cmdline + "': '" + cmdout + "'\n")
                filesfile.close()
            else:
                print("output of '" + cmdline + "' saves to '" + cmdout +"'")
        else:
            runcmd = subopen(line.split(), cwd=RUNFROM, stdout=subpipe)
            output, error = runcmd.communicate()
            cmdfile = open(cmdout, "w+")
            for outline in output:
                lineout = outline
                cmdfile.write(lineout)
            cmdfile.close()


# add configs to list of files to collect
def add_cfgs(cfgsin):
    for line in cfgsin:
        cfgfiles=sorted(dirlist(line))
        for cfgline in cfgfiles:
            datlines.append(cfgline)


# add logs to list of files to collect
def add_logs(logsin):
    for line in logsin:
        logfiles=sorted(dirlist(line))
        for logline in logfiles:
            datlines.append(line)

# open urls and add output to list of files to collect
def add_urls(urlsin, tmpin, testing, menu):
    urldir = tmpin + "/urls"
    check_dir(urldir)
    for line in urlsin:
        urlline = line
        urlname = urlline.replace("http://", "")
        urlname = urlname.replace("https://", "")
        urlname = urlname.replace(".", "_")
        urlname = urlname.replace(":", "-")
        urlname = urlname.replace("/", ".")
        urlout = urldir + "/" + urlname + "-" + timestamp
        datlines.append(urlout)
        if testing:
            if menu:
                filesfile = open('/tmp/files_out', 'a+')
                filesfile.write("output of '" + urlline + "': '" + urlout + "'\n")
                filesfile.close()
            else:
                print("output of '" + urlline + "' saves to '" + urlout + "'")
        else:
            geturl = openurl(urlline)
            output = geturl.read()
            urlfile = open(urlout, "w+")
            for outline in output:
                lineout = outline
                urlfile.write(lineout)
            urlfile.close()

def main(argv):

    # Variable defaults values
    isquiet = False
    istest = False
    isdefault = True
    ismenu = False
    isalways = True
    timestamp = now("%Y%m%d%H%M%S%z")
    datfile = DATA
    tmpdir = "/opt/proofpoint/tmp"
    outpath = "/opt/proofpoint/uddc"
    getkey = "always"
    getkeylist = ""
    getkeyarray = []
    getcfgs = True
    getcmds = True
    getlogs = True
    geturls = True
    goboom = False

    gethost = subopen("hostname", stdout=subpipe)
    hostout, error = gethost.communicate()
    hostname = hostout.split('.')[0]

    outfile = "uddc_" + hostname + "_" + getkey + "_" + timestamp + ".tgz"
    
    try:
        opts, args = options(argv, "qhvsp:o:k:t:g:",["quiet", "help", "version", "mversion", \
        "show", "gimme", "path=", "output=", "keyfile=", "temp=", "get=", "mget=", \
        "test", "notalways", "nocfgs", "nocmds", "nologs", "nourls", "selfdestruct"])
    except opterr:
        help_out()
        isfail(2)

    for opt, arg in opts:
        if opt in ("-q", "--quiet"):
            isquiet = True
        elif opt in ("-h", "--help"):
            help_out()
        elif opt in ("-v", "--version"):
            version_out()
        elif opt == '--mversion':
            menu_version()
        elif opt in ("-s", "--show"):
            show_out(datfile)
        elif opt == '--gimme':
            gimme_out(datfile)
        elif opt in ("-p", "--path"):
            outpath = arg
            fileout = outpath + "/" + outfile
        elif opt in ("-o", "--output"):
            outfile = arg
            fileout = outpath + "/" + outfile
            isdefault = False
        elif opt in ("-k", "--keyfile"):
            datfile = arg
        elif opt in ("-t", "--temp"):
            tmpdir = arg
        elif opt in ("-g", "--get"):
            getkey = arg
            getkeyarray = getkey.split(",")
            if isdefault:
                getkeylist = getkey.replace(",","+")
                outfile = "uddc_" + hostname + "_" + getkeylist + "_" + timestamp + ".tgz"
        elif opt == '--mget':
            ismenu = True
            getkey = arg
            getkeyarray = getkey.split(",")
            if isdefault:
                getkeylist = getkey.replace(",","+")
                outfile = "uddc_" + hostname + "_" + getkeylist + "_" + timestamp + ".tgz"
        elif opt == '--test':
            istest = True
        elif opt == '--notalways':
            isalways = False
        elif opt == '--nocfgs':
            getcfgs = False
        elif opt == '--nocmds':
            getcmds = False
        elif opt == '--nologs':
            getlogs = False
        elif opt == '--nourls':
            geturls = False
        elif opt == '--selfdestruct':
            goboom = True
        else:
            help_out

    fileout = outpath + "/" + outfile
    
    # Fix for broken soft link
    read_keyfile("fixit", DATA, False, False, False, True, False, False)
    add_cmds(cmdlines, tmpdir, False, False)
    cleanup(tmpdir + "/cmds")

    check_dir(outpath)
    check_dir(tmpdir)
    check_keyfile(datfile)

    for i in range(len(getkeyarray)):
        read_keyfile(getkeyarray[i], datfile, ismenu, isalways, getcfgs, getcmds, getlogs, geturls)

    if not ismenu:
        print("Gathering data. Please be patient, this may take some time.")

    add_cfgs(cfglines)
    add_logs(loglines)
    check_size(datlines, outpath, istest)
    add_cmds(cmdlines, tmpdir, istest, ismenu)
    add_urls(urllines, tmpdir, istest, ismenu)
    make_filelist(datlines, fileout, istest, ismenu)
    make_tar(datlines, fileout, istest, ismenu, isquiet)

    cleanup(tmpdir + "/cmds")
    cleanup(tmpdir + "/urls")

    if not ismenu:
        print("Data gathering complete.")

    if goboom:
        print("Self destruct activated.")
        dirfiles = filelist("./")
        for line in dirfiles:
            if outfile not in line:
                rmfile(line)
        print("Self destruct completed.")
        print("Only " + fileout + " remains.")

if __name__ == "__main__":
    main(sysarg[1:])
